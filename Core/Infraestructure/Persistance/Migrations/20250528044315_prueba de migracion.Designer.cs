// <auto-generated />
using System;
using Core.Infraestructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Core.Infraestructure.Persistance.Migrations
{
    [DbContext(typeof(FisioContext))]
    [Migration("20250528044315_prueba de migracion")]
    partial class pruebademigracion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Domain.Entities.Cat_Especialidades", b =>
                {
                    b.Property<int>("EspecialidadesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("EspecialidadesId");

                    b.HasIndex("Descripcion")
                        .IsUnique();

                    b.ToTable("cat_especialidad", (string)null);

                    b.HasData(
                        new
                        {
                            EspecialidadesId = 1,
                            Descripcion = "Fisioterapeuta",
                            Status = true
                        });
                });

            modelBuilder.Entity("Core.Domain.Entities.Cat_EstadoCivil", b =>
                {
                    b.Property<int>("EstadoCivilId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("EstadoCivilId");

                    b.HasIndex("Descripcion")
                        .IsUnique();

                    b.ToTable("cat_estado_civil", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.Cat_FlujoVaginal", b =>
                {
                    b.Property<int>("FlujoVaginalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("FlujoVaginalId");

                    b.HasIndex("Descripcion")
                        .IsUnique();

                    b.ToTable("cat_flujo_vaginal", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.Cat_MotivoAlta", b =>
                {
                    b.Property<int>("MotivoAltaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("MotivoAltaId");

                    b.HasIndex("Descripcion")
                        .IsUnique();

                    b.ToTable("cat_motivo_alta", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.Cat_Patologias", b =>
                {
                    b.Property<int>("PatologiasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("PatologiasId");

                    b.HasIndex("Descripcion")
                        .IsUnique();

                    b.ToTable("cat_patologias", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.Cat_Servicios", b =>
                {
                    b.Property<int>("ServiciosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ServiciosId");

                    b.HasIndex("Descripcion")
                        .IsUnique();

                    b.ToTable("cat_servicios", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.Cat_TipoAnticonceptivo", b =>
                {
                    b.Property<int>("TipoAnticonceptivoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("TipoAnticonceptivoId");

                    b.HasIndex("Descripcion")
                        .IsUnique();

                    b.ToTable("cat_tipo_anticonceptivo", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.Cita", b =>
                {
                    b.Property<int>("CitasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<int?>("FisioterapeutaId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Hora")
                        .HasColumnType("time");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("CitasId");

                    b.HasIndex(new[] { "FisioterapeutaId" }, "fisioterapeuta_id");

                    b.HasIndex(new[] { "PacienteId" }, "paciente_id");

                    b.ToTable("citas", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.Diagnostico", b =>
                {
                    b.Property<int>("DiagnosticoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DiagnosticoFinal")
                        .HasColumnType("longtext");

                    b.Property<string>("DiagnosticoFuncional")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DiagnosticoInicial")
                        .HasColumnType("longtext");

                    b.Property<string>("DiagnosticoNosologico")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DiagnosticoPrevio")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Estatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EstudiosComplementarios")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ExpedienteId")
                        .HasColumnType("int");

                    b.Property<string>("ExploracionFisicaCuadro")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("FechaAlta")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("date");

                    b.Property<string>("FrecuenciaTratamiento")
                        .HasColumnType("longtext");

                    b.Property<string>("Inspeccion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MapaCorporalId")
                        .HasColumnType("int");

                    b.Property<int?>("MotivoAltaId")
                        .HasColumnType("int");

                    b.Property<string>("PadecimientoActual")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("PatologiasId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramaFisioterapeuticoId")
                        .HasColumnType("int");

                    b.Property<string>("Refiere")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TerapeuticaEmpleada")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("DiagnosticoId");

                    b.HasIndex("MapaCorporalId")
                        .IsUnique();

                    b.HasIndex("PatologiasId");

                    b.HasIndex("ProgramaFisioterapeuticoId")
                        .IsUnique();

                    b.HasIndex(new[] { "ExpedienteId" }, "expediente_id");

                    b.HasIndex(new[] { "MapaCorporalId" }, "mapacorporal_id");

                    b.HasIndex(new[] { "MotivoAltaId" }, "motivoalta_id");

                    b.HasIndex(new[] { "MotivoAltaId" }, "patologias_id");

                    b.HasIndex(new[] { "ProgramaFisioterapeuticoId" }, "programafisioterapeutico_id");

                    b.ToTable("diagnostico", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.Expediente", b =>
                {
                    b.Property<int>("ExpedienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AntecedentesPatologicos")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("HeredoFamiliarId")
                        .HasColumnType("int");

                    b.Property<int>("NoPatologicoId")
                        .HasColumnType("int");

                    b.Property<string>("Nomenclatura")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<string>("Responsable")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("TipoInterrogatorio")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ExpedienteId");

                    b.HasIndex("HeredoFamiliarId")
                        .IsUnique();

                    b.HasIndex("NoPatologicoId")
                        .IsUnique();

                    b.HasIndex("Nomenclatura")
                        .IsUnique();

                    b.HasIndex("PacienteId")
                        .IsUnique();

                    b.HasIndex(new[] { "HeredoFamiliarId" }, "heredofamiliar_id");

                    b.HasIndex(new[] { "NoPatologicoId" }, "nopatologico_id");

                    b.HasIndex(new[] { "PacienteId" }, "paciente_id")
                        .HasDatabaseName("paciente_id1");

                    b.ToTable("expediente", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.ExploracionFisica", b =>
                {
                    b.Property<int>("ExploracionFisicaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("Estatura")
                        .HasColumnType("float");

                    b.Property<int>("Fc")
                        .HasColumnType("int");

                    b.Property<int>("Fr")
                        .HasColumnType("int");

                    b.Property<float>("Imc")
                        .HasColumnType("float");

                    b.Property<float>("IndiceCinturaCadera")
                        .HasColumnType("float");

                    b.Property<float>("Peso")
                        .HasColumnType("float");

                    b.Property<string>("PresionArterial")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("SaturacionOxigeno")
                        .HasColumnType("float");

                    b.Property<float>("Temperatura")
                        .HasColumnType("float");

                    b.HasKey("ExploracionFisicaId");

                    b.ToTable("exploracion_fisica", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.Fisioterapeuta", b =>
                {
                    b.Property<int>("FisioterapeutaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CedulaProfesional")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("EspecialidadId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("FotoPerfil")
                        .HasColumnType("longblob");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("FisioterapeutaId");

                    b.HasIndex("CedulaProfesional")
                        .IsUnique();

                    b.HasIndex("Correo")
                        .IsUnique();

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.HasIndex("Telefono")
                        .IsUnique();

                    b.HasIndex(new[] { "EspecialidadId" }, "especialidad_id");

                    b.ToTable("fisioterapeuta", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.GinecoObstetrico", b =>
                {
                    b.Property<int>("GinecoObstetricoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Abortos")
                        .HasColumnType("int");

                    b.Property<int>("Cesareas")
                        .HasColumnType("int");

                    b.Property<string>("Cirugias")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("EdadGestional")
                        .HasColumnType("int");

                    b.Property<int>("ExpedienteId")
                        .HasColumnType("int");

                    b.Property<int?>("FlujoVaginalId")
                        .HasColumnType("int");

                    b.Property<string>("Fpp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Fum")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gestas")
                        .HasColumnType("int");

                    b.Property<string>("Menarca")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Partos")
                        .HasColumnType("int");

                    b.Property<string>("Ritmo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Semanas")
                        .HasColumnType("int");

                    b.Property<int?>("TipoAnticonceptivoId")
                        .HasColumnType("int");

                    b.HasKey("GinecoObstetricoId");

                    b.HasIndex("ExpedienteId")
                        .IsUnique();

                    b.HasIndex(new[] { "FlujoVaginalId" }, "flujo_vaginal_id");

                    b.HasIndex(new[] { "TipoAnticonceptivoId" }, "tipo_anticonceptivo_id");

                    b.ToTable("gineco_obstetrico", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.HeredoFamiliar", b =>
                {
                    b.Property<int>("HeredoFamiliarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Alcoholismo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Cancer")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Dm")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Drogas")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Hermanos")
                        .HasColumnType("int");

                    b.Property<string>("HermanosCausaMuerte")
                        .HasColumnType("longtext");

                    b.Property<int>("HermanosVivos")
                        .HasColumnType("int");

                    b.Property<int>("Hijos")
                        .HasColumnType("int");

                    b.Property<string>("HijosCausaMuerte")
                        .HasColumnType("longtext");

                    b.Property<int>("HijosVivos")
                        .HasColumnType("int");

                    b.Property<string>("Hta")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Padres")
                        .HasColumnType("int");

                    b.Property<string>("PadresCausaMuerte")
                        .HasColumnType("longtext");

                    b.Property<int>("PadresVivos")
                        .HasColumnType("int");

                    b.Property<string>("Tabaquismo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("HeredoFamiliarId");

                    b.ToTable("heredo_familiar", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.MapaCorporal", b =>
                {
                    b.Property<int>("MapaCorporalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nota")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RangoDolor")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.HasKey("MapaCorporalId");

                    b.ToTable("mapa_corporal", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.NoPatologico", b =>
                {
                    b.Property<int>("NoPatologicoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("MedioFisicoambiental")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MedioLaboral")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MedioSociocultural")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("NoPatologicoId");

                    b.ToTable("no_patologico", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.Paciente", b =>
                {
                    b.Property<int>("PacienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CodigoPostal")
                        .HasColumnType("int");

                    b.Property<string>("Domicilio")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Edad")
                        .HasColumnType("date");

                    b.Property<int?>("EstadoCivilId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("FisioterapeutaId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Foto")
                        .HasColumnType("longblob");

                    b.Property<string>("Institucion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Notas")
                        .HasColumnType("longtext");

                    b.Property<string>("Ocupacion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Sexo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("TipoPaciente")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("PacienteId");

                    b.HasIndex("Telefono")
                        .IsUnique();

                    b.HasIndex("Nombre", "Apellido")
                        .IsUnique();

                    b.HasIndex(new[] { "EstadoCivilId" }, "estado_civil_id");

                    b.HasIndex(new[] { "FisioterapeutaId" }, "fisioterapueta_id");

                    b.ToTable("paciente", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.ProgramaFisioterapeutico", b =>
                {
                    b.Property<int>("ProgramaFisioterapeuticoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CortoPlazo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LargoPlazo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MedianoPlazo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Pronostico")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Sugerencias")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TratamientoFisioterapeutico")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ProgramaFisioterapeuticoId");

                    b.ToTable("programa_fisioterapeutico", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Expiracion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("RefreshTokenId");

                    b.ToTable("refresh_token", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.Revision", b =>
                {
                    b.Property<int>("RevisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DiagnosticoId")
                        .HasColumnType("int");

                    b.Property<int>("ExploracionFisicaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<string>("FolioPago")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("Hora")
                        .HasColumnType("time");

                    b.Property<string>("Notas")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ServicioId")
                        .HasColumnType("int");

                    b.HasKey("RevisionId");

                    b.HasIndex(new[] { "DiagnosticoId" }, "diagnostico_id");

                    b.HasIndex(new[] { "ExploracionFisicaId" }, "exploracionfisica_id");

                    b.HasIndex(new[] { "ServicioId" }, "servicio_id");

                    b.ToTable("revision", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Correo")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("EspecialidadId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("FotoPerfil")
                        .HasColumnType("longblob");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Telefono")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("UsuarioId");

                    b.HasIndex("Correo")
                        .IsUnique();

                    b.HasIndex("Telefono")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.HasIndex(new[] { "EspecialidadId" }, "especialidad_id")
                        .HasDatabaseName("especialidad_id1");

                    b.ToTable("usuario", (string)null);

                    b.HasData(
                        new
                        {
                            UsuarioId = 1,
                            Clave = "$2a$11$/JWP8Z5kDtqpwAkEG7u5OuG1Iu141q1e/LBsp2y6giQ08bf4lANR2",
                            FechaRegistro = new DateTime(2025, 5, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            Password = "$2a$11$AwBlNmqamHk4mAaUAR1aeuWyn.xQETPrfskfKV0xkOwwg17tIa5Vi",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("Core.Domain.Entities.Cita", b =>
                {
                    b.HasOne("Core.Domain.Entities.Fisioterapeuta", "Fisio")
                        .WithMany("Citas")
                        .HasForeignKey("FisioterapeutaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("citas_ibfk_2");

                    b.HasOne("Core.Domain.Entities.Paciente", "Paciente")
                        .WithMany("Citas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("citas_ibfk_1");

                    b.Navigation("Fisio");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Core.Domain.Entities.Diagnostico", b =>
                {
                    b.HasOne("Core.Domain.Entities.Expediente", "Expediente")
                        .WithMany("Diagnosticos")
                        .HasForeignKey("ExpedienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("diagnostico_ibfk_1");

                    b.HasOne("Core.Domain.Entities.MapaCorporal", "MapaCorporal")
                        .WithOne("Diagnostico")
                        .HasForeignKey("Core.Domain.Entities.Diagnostico", "MapaCorporalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("diagnostico_ibfk_3");

                    b.HasOne("Core.Domain.Entities.Cat_MotivoAlta", "MotivoAlta")
                        .WithMany("Diagnosticos")
                        .HasForeignKey("MotivoAltaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("diagnostico_ibfk_4");

                    b.HasOne("Core.Domain.Entities.Cat_Patologias", "Patologias")
                        .WithMany("Diagnosticos")
                        .HasForeignKey("PatologiasId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("diagnostico_ibfk_5");

                    b.HasOne("Core.Domain.Entities.ProgramaFisioterapeutico", "ProgramaFisioterapeutico")
                        .WithOne("Diagnostico")
                        .HasForeignKey("Core.Domain.Entities.Diagnostico", "ProgramaFisioterapeuticoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("diagnostico_ibfk_2");

                    b.Navigation("Expediente");

                    b.Navigation("MapaCorporal");

                    b.Navigation("MotivoAlta");

                    b.Navigation("Patologias");

                    b.Navigation("ProgramaFisioterapeutico");
                });

            modelBuilder.Entity("Core.Domain.Entities.Expediente", b =>
                {
                    b.HasOne("Core.Domain.Entities.HeredoFamiliar", "HeredoFamiliar")
                        .WithOne("Expediente")
                        .HasForeignKey("Core.Domain.Entities.Expediente", "HeredoFamiliarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("expediente_ibfk_2");

                    b.HasOne("Core.Domain.Entities.NoPatologico", "NoPatologico")
                        .WithOne("Expediente")
                        .HasForeignKey("Core.Domain.Entities.Expediente", "NoPatologicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("expediente_ibfk_3");

                    b.HasOne("Core.Domain.Entities.Paciente", "paciente")
                        .WithOne("Expediente")
                        .HasForeignKey("Core.Domain.Entities.Expediente", "PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("paciente_ibfk_3");

                    b.Navigation("HeredoFamiliar");

                    b.Navigation("NoPatologico");

                    b.Navigation("paciente");
                });

            modelBuilder.Entity("Core.Domain.Entities.Fisioterapeuta", b =>
                {
                    b.HasOne("Core.Domain.Entities.Cat_Especialidades", "Especialidades")
                        .WithMany("Fisioterapeutas")
                        .HasForeignKey("EspecialidadId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fisioterapeuta_ibfk_1");

                    b.Navigation("Especialidades");
                });

            modelBuilder.Entity("Core.Domain.Entities.GinecoObstetrico", b =>
                {
                    b.HasOne("Core.Domain.Entities.Expediente", "Expediente")
                        .WithOne("GinecoObstetrico")
                        .HasForeignKey("Core.Domain.Entities.GinecoObstetrico", "ExpedienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("expediente_ibfk_1");

                    b.HasOne("Core.Domain.Entities.Cat_FlujoVaginal", "CatFlujoVaginal")
                        .WithMany("GinecoObstetricos")
                        .HasForeignKey("FlujoVaginalId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("gineco_obstetrico_ibfk_1");

                    b.HasOne("Core.Domain.Entities.Cat_TipoAnticonceptivo", "CatTipoAnticonceptivo")
                        .WithMany("GinecoObstetricos")
                        .HasForeignKey("TipoAnticonceptivoId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("gineco_obstetrico_ibfk_2");

                    b.Navigation("CatFlujoVaginal");

                    b.Navigation("CatTipoAnticonceptivo");

                    b.Navigation("Expediente");
                });

            modelBuilder.Entity("Core.Domain.Entities.Paciente", b =>
                {
                    b.HasOne("Core.Domain.Entities.Cat_EstadoCivil", "CatEstadoCivil")
                        .WithMany("Pacientes")
                        .HasForeignKey("EstadoCivilId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("paciente_ibfk_1");

                    b.HasOne("Core.Domain.Entities.Fisioterapeuta", "Fisioterapeuta")
                        .WithMany("Pacientes")
                        .HasForeignKey("FisioterapeutaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("paciente_ibfk_2");

                    b.Navigation("CatEstadoCivil");

                    b.Navigation("Fisioterapeuta");
                });

            modelBuilder.Entity("Core.Domain.Entities.Revision", b =>
                {
                    b.HasOne("Core.Domain.Entities.Diagnostico", "Diagnostico")
                        .WithMany("Revisions")
                        .HasForeignKey("DiagnosticoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("revision_ibfk_1");

                    b.HasOne("Core.Domain.Entities.ExploracionFisica", "ExploracionFisica")
                        .WithMany("Revisions")
                        .HasForeignKey("ExploracionFisicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("revision_ibfk_2");

                    b.HasOne("Core.Domain.Entities.Cat_Servicios", "Servicio")
                        .WithMany("Revisions")
                        .HasForeignKey("ServicioId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("revision_ibfk_3");

                    b.Navigation("Diagnostico");

                    b.Navigation("ExploracionFisica");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("Core.Domain.Entities.Usuario", b =>
                {
                    b.HasOne("Core.Domain.Entities.Cat_Especialidades", "Especialidades")
                        .WithMany("Usuarios")
                        .HasForeignKey("EspecialidadId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("usuario_ibfk_1");

                    b.Navigation("Especialidades");
                });

            modelBuilder.Entity("Core.Domain.Entities.Cat_Especialidades", b =>
                {
                    b.Navigation("Fisioterapeutas");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Core.Domain.Entities.Cat_EstadoCivil", b =>
                {
                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("Core.Domain.Entities.Cat_FlujoVaginal", b =>
                {
                    b.Navigation("GinecoObstetricos");
                });

            modelBuilder.Entity("Core.Domain.Entities.Cat_MotivoAlta", b =>
                {
                    b.Navigation("Diagnosticos");
                });

            modelBuilder.Entity("Core.Domain.Entities.Cat_Patologias", b =>
                {
                    b.Navigation("Diagnosticos");
                });

            modelBuilder.Entity("Core.Domain.Entities.Cat_Servicios", b =>
                {
                    b.Navigation("Revisions");
                });

            modelBuilder.Entity("Core.Domain.Entities.Cat_TipoAnticonceptivo", b =>
                {
                    b.Navigation("GinecoObstetricos");
                });

            modelBuilder.Entity("Core.Domain.Entities.Diagnostico", b =>
                {
                    b.Navigation("Revisions");
                });

            modelBuilder.Entity("Core.Domain.Entities.Expediente", b =>
                {
                    b.Navigation("Diagnosticos");

                    b.Navigation("GinecoObstetrico")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.Entities.ExploracionFisica", b =>
                {
                    b.Navigation("Revisions");
                });

            modelBuilder.Entity("Core.Domain.Entities.Fisioterapeuta", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("Core.Domain.Entities.HeredoFamiliar", b =>
                {
                    b.Navigation("Expediente")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.Entities.MapaCorporal", b =>
                {
                    b.Navigation("Diagnostico")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.Entities.NoPatologico", b =>
                {
                    b.Navigation("Expediente")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.Entities.Paciente", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("Expediente")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.Entities.ProgramaFisioterapeutico", b =>
                {
                    b.Navigation("Diagnostico")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
